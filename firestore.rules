rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /customers/{userId} {
      allow read, create: if request.auth != null && request.auth.uid == userId;

      // --- UPDATED UPDATE RULE ---
      allow update: if request.auth != null && request.auth.uid == userId && (
        // Allow updates to general profile info at any time
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'name', 'hobbies', 'bio', 'nativeLanguage', 'targetLanguage', 
          'savedChat', 'teachMeCache', 'notes', 'activeGroupId', 'usage', 'xp'
        ]) ||

        // Allow initial age verification (write only once)
        (
          !resource.data.isAgeVerified && // Can only write if not already verified
          request.resource.data.isAgeVerified == true &&
          request.resource.data.birthDate != null &&
          request.resource.data.diff(resource.data).affectedKeys().hasAll(['isAgeVerified', 'birthDate'])
        ) ||

        // Allow changing content preference ONLY IF age is already verified
        (
          resource.data.isAgeVerified == true &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['contentPreference']) &&
          request.resource.data.contentPreference in ['standard', 'pg13', 'r21plus']
        )
      );

      // --- Subcollections (No Change) ---
      match /checkout_sessions/{id} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /subscriptions/{id} {
        allow read: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Group Chats Rules (No Change) ---
    match /groupChats/{groupId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
      allow update: if request.auth != null && (
        // Joining
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          !resource.data.members.keys().hasAny([request.auth.uid]) &&
          request.resource.data.members.keys().hasAny([request.auth.uid]) &&
          request.resource.data.members.size() <= 3
        ) ||
        // Leaving
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          !request.resource.data.members.keys().hasAny([request.auth.uid]) &&
          resource.data.members.keys().hasAny([request.auth.uid])
        ) ||
        // Updating topic
        (
          request.auth.uid == resource.data.creatorId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['topic']) &&
          request.resource.data.topic != resource.data.topic
        ) ||
        // Adding a message
        (
          request.auth.uid in resource.data.members &&
          request.resource.data.messages.size() == resource.data.messages.size() + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['messages']) &&
          (
            ('senderId' in request.resource.data.messages[request.resource.data.messages.size() - 1] &&
             request.resource.data.messages[request.resource.data.messages.size() - 1].senderId == request.auth.uid) ||
            (request.resource.data.messages[request.resource.data.messages.size() - 1].sender == 'ai')
          )
        )
      );
    }

    // --- YouTube Video Cache Rules (No Change) ---
    match /videoCache/{cacheId} {
      allow read: if request.auth != null;
      allow write: if false; 
    }

    // --- Public Products & Prices Rules (No Change) ---
    match /products/{id} {
      allow read: if true;
      match /prices/{id} {
        allow read: if true;
      }
    }
  }
}